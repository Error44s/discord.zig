name: PullApprove (Lite)

on:
  pull_request_target:
    types: [opened, ready_for_review, reopened, synchronize, review_requested, review_request_removed, closed]
  pull_request_review:
    types: [submitted, edited, dismissed]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

concurrency:
  group: pa-lite-${{ github.event.pull_request.node_id || github.run_id }}
  cancel-in-progress: true

jobs:
  gate:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Auto request reviews from CODEOWNERS
        if: github.event_name == 'pull_request_target'
        uses: necojackarc/auto-request-review@v0.7.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config: .github/CODEOWNERS
          skip-draft: true

      - name: Evaluate approvals and update labels/check
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const pr    = context.payload.pull_request;
            if (!pr) return core.setFailed("No pull_request in payload.");
            const number = pr.number;

            const REQUIRED_APPROVALS = 1;
            const LABELS = {
              pending:  ["PA: Maintainers pending", "PA: All Contributors pending"],
              approved: ["PA: Maintainers approved", "PA: All Contributors approved"]
            };
            const LABEL_COLORS = {
              "PA: Maintainers pending":  "c5def5",
              "PA: All Contributors pending": "c5def5",
              "PA: Maintainers approved": "bfe5bf",
              "PA: All Contributors approved": "bfe5bf",
              "Merge: successful": "0e8a16",
              "Merge: declined":   "d93f0b",
              "Reopened":          "0366d6"
            };

            const allReviews = await github.paginate(
              github.rest.pulls.listReviews,
              { owner, repo, pull_number: number, per_page: 100 }
            );

            const latestByUser = new Map();
            for (const r of allReviews) latestByUser.set(r.user.login, r.state);
            const approvals = [...latestByUser.values()].filter(s => s === "APPROVED").length;
            const hasEnough = approvals >= REQUIRED_APPROVALS;

            async function ensureLabel(name) {
              try { await github.rest.issues.getLabel({ owner, repo, name }); }
              catch { await github.rest.issues.createLabel({ owner, repo, name, color: LABEL_COLORS[name] || "ededed" }).catch(() => {}); }
            }
            for (const l of [...LABELS.pending, ...LABELS.approved, "Merge: successful", "Merge: declined", "Reopened"]) await ensureLabel(l);

            const { data: current } = await github.rest.issues.listLabelsOnIssue({ owner, repo, issue_number: number });
            const have = new Set(current.map(l => l.name));
            const add = hasEnough ? LABELS.approved : LABELS.pending;
            const rm  = hasEnough ? LABELS.pending  : LABELS.approved;

            if (add.some(l => !have.has(l))) {
              await github.rest.issues.addLabels({ owner, repo, issue_number: number, labels: add }).catch(() => {});
            }
            for (const n of rm) {
              if (have.has(n)) await github.rest.issues.removeLabel({ owner, repo, issue_number: number, name: n }).catch(() => {});
            }
            for (const n of ["Merge: successful","Merge: declined","Reopened"]) {
              if (have.has(n)) await github.rest.issues.removeLabel({ owner, repo, issue_number: number, name: n }).catch(() => {});
            }

            const conclusion = hasEnough ? "success" : "failure";
            const title = hasEnough ? `Approved (${approvals}/${REQUIRED_APPROVALS})` : `Waiting for approvals (${approvals}/${REQUIRED_APPROVALS})`;

            await github.rest.checks.create({
              owner, repo,
              name: "PullApprove (Lite)",
              head_sha: pr.head.sha,
              status: "completed",
              completed_at: new Date().toISOString(),
              conclusion,
              output: { title, summary: hasEnough ? "Required approvals met. You can merge." : "Not enough approvals yet. Request reviews from CODEOWNERS." }
            });

  state:
    if: github.event_name == 'pull_request_target' && (github.event.action == 'closed' || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: Update state labels
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const pr    = context.payload.pull_request;
            if (!pr) return;
            const number = pr.number;

            const COLORS = {
              "Merge: successful": "0e8a16",
              "Merge: declined":   "d93f0b",
              "Reopened":          "0366d6"
            };

            async function ensure(name) {
              try { await github.rest.issues.getLabel({ owner, repo, name }); }
              catch { await github.rest.issues.createLabel({ owner, repo, name, color: COLORS[name] || "ededed" }).catch(() => {}); }
            }
            for (const n of Object.keys(COLORS)) await ensure(n);

            const { data: current } = await github.rest.issues.listLabelsOnIssue({ owner, repo, issue_number: number });
            const have = new Set(current.map(l => l.name));
            const toRemove = [...have].filter(n => n.startsWith("PA: ") || ["Merge: successful","Merge: declined","Reopened"].includes(n));
            for (const n of toRemove) await github.rest.issues.removeLabel({ owner, repo, issue_number: number, name: n }).catch(() => {});

            if (context.eventName === "pull_request_target" && context.payload.action === "reopened") {
              await github.rest.issues.addLabels({ owner, repo, issue_number: number, labels: ["Reopened"] }).catch(() => {});
            } else if (context.eventName === "pull_request_target" && context.payload.action === "closed") {
              const label = pr.merged ? "Merge: successful" : "Merge: declined";
              await github.rest.issues.addLabels({ owner, repo, issue_number: number, labels: [label] }).catch(() => {});
            }
